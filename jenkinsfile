@Library('simple') _

pipeline {
    agent any
environment {
registry = "docker.io/marwan512"
registryCredential = 'dockerhub_id'
dockerImage = ''

OPENSHIFT_CONFIG_FILE = 'KubeConfigFile'

OPENSHIFT_PROJECT = 'marwan'
OPENSHIFT_APP_NAME = 'marwan-jenkins-app2'
image = "spring-app"
YamlPath = './deployment.yaml'
}

stages {
stage('Git Checkout') {
steps {
                script {
                    git branch: 'main',
                       // credentialsId: 'github_id',
                        url: 'https://github.com/Marwan465/MultiCloudDevOpsProject.git'
                        
                }
                 script{
                    //give the gradlew file excutable permissions
                     sh 'chmod +x ./gradlew'
                     sh './gradlew clean build'
                }

}
}

stage('Unit Test'){
    steps{
        script{
            test.unitTest()
        }
    }
}


stage('Build') {
steps{
script {
    
 (COMMIT_HASH,dockerImage) = dockerize.buildDockerImage(registry, image)
 

echo "IMAGE: ${dockerImage} *** ${registry}/${image}:${COMMIT_HASH}"
}
script {
   COMMIT_HASH = dockerize.pushDockerImage(registryCredential, dockerImage)
}

}
}


 stage('Deploy on OpenShift') {
            steps {
                script {
      
                  def yamlContent = readFile("${YamlPath}")
                  //echo "IMAGE_NAME: ${dockerImage} or ${registry}:latest"
                    echo "Original YAML Content:\n${yamlContent}"
                    yamlContent = yamlContent.replace('\${IMAGE_NAME}', "${registry}/${image}:${COMMIT_HASH}")
                    yamlContent = yamlContent.replace('\${APP_NAME}', "${OPENSHIFT_APP_NAME}")
                  echo "Updated YAML Content:\n${yamlContent}"
                    // Save the updated YAML content
                    writeFile file: YamlPath, text: yamlContent
                  // echo "IMAGE_NAME: ${env.dockerImage}"
}
                script {
          deploy.openshiftDeploy(OPENSHIFT_CONFIG_FILE,OPENSHIFT_PROJECT,YamlPath)
          deploy.asService(OPENSHIFT_CONFIG_FILE,OPENSHIFT_APP_NAME)
          deploy.createRoute(OPENSHIFT_CONFIG_FILE,OPENSHIFT_APP_NAME)
                }
            }
        }

stage('SonarQube Test'){
    steps{
        script{
            test.sonarQubeTest()
        }
    }
}
        


}

 post{
    always {  
      sh 'docker logout'           
    }      
  }  
}
